apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: server
  namespace: {{ .Values.namespace.server }}
  labels:
    {{- include "teamcity.labels" . | nindent 4 }}
spec:
  serviceName: nodes-headless
  replicas: {{ .Values.server.env.REPLICAS }}
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      {{- include "teamcity.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
        {{- include "teamcity.labels" . | nindent 8 }}
    spec:
      initContainers:
        - name: config-restore
          image: badouralix/curl-jq
          env:
            - name: TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: {{ include "teamcity.fullname" . }}-sa-token
          volumeMounts:
            - mountPath: {{ .Values.server.env.TEAMCITY_DATA_PATH }}
              name: data
            {{ include "teamcity.server.configs.volumeMounts" . | indent 12 }}
          command:
            - sh
            - -c
            - >
              set -euo pipefail

              if [[ -d /server-config.dist/ ]] && [[ "$(ls /server-config.dist/ | wc -l)" -gt "0" ]]; then
                echo 'Found initial configs mounted at /server-config.dist'

                if [[ "$(ls -A /mnt/data | wc -l)" == "0" ]]; then
                  echo 'Data dir is empty, restoring configs'

                  cp -rL /server-config.dist/* /mnt/data
                  mkdir -p /mnt/data/lib/jdbc
                  curl https://jdbc.postgresql.org/download/postgresql-42.7.7.jar -o /mnt/data/lib/jdbc/postgresql-42.7.7.jar
                  apk add envsubst
                  envsubst < /mnt/data/config/projects/_Root/project-config.xml > /tmp/project-config.xml
                  mv /tmp/project-config.xml /mnt/data/config/projects/_Root/project-config.xml
                  chown -R 1000:1000 /mnt/data
                else
                  echo 'Data dir is NOT empty, skipping config restore'
                fi

              else
                echo 'ERROR: No initial configs mounted at /server-config.dist'
                exit 1
              fi
        - name: pg-restore
          image: postgres:17
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: SERVER_ADMIN_USERNAME
              value: {{ .Values.server.admin.username }}
            - name: SERVER_ADMIN_PASSWORD
              value: {{ .Values.server.admin.password }}
            - name: POSTGRES_HOST
              value: {{ include "teamcity.postgresql.host" . }}
            - name: POSTGRES_PORT
              value: "{{ .Values.postgresql.service.ports.postgresql }}"
            - name: POSTGRES_DB
              value: {{ .Values.postgresql.auth.database }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Release.Name }}-db-auth
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-db-auth
          volumeMounts:
            - mountPath: /mnt/
              name: pg-dump
          command:
            - bash
            - -c
            - >
              set -euo pipefail

              if [[ -f /mnt/teamcity-dump.sql ]]; then
                echo 'Found DB dump mounted at /mnt/teamcity-dump.sql'
                
                if [[ ${POD_INDEX} == 0 ]]; then

                  while ! $(pg_isready -q -h ${POSTGRES_HOST} -p ${POSTGRES_PORT}); do
                    echo 'Waiting for postgres to be available'
                    sleep 1
                  done

                  TBL_COUNT=$(
                    PGPASSWORD=${POSTGRES_PASSWORD} \
                    psql -q --tuples-only \
                    -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} \
                    -c "SELECT count(table_name) FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE';"
                  )

                  if (( ${TBL_COUNT} == 0 )); then
                    echo 'Database is empty, restoring dump'
                    apt-get update && apt-get install -y apache2-utils
                    export SERVER_ADMIN_PASSWORD_BCRYPT=$(echo ${SERVER_ADMIN_PASSWORD} | htpasswd -inB - | cut -d ':' -f2)
                    cp /mnt/teamcity-dump.sql /tmp/teamcity-dump.sql
                    sed -i s#"__admin_username__"#"${SERVER_ADMIN_USERNAME}"# /tmp/teamcity-dump.sql
                    sed -i s#"__admin_password__"#"${SERVER_ADMIN_PASSWORD_BCRYPT}"# /tmp/teamcity-dump.sql
                    PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /tmp/teamcity-dump.sql
                  else
                    echo 'Database is NOT empty, skipping'
                  fi

                else
                  echo 'Not a main node, skipping'
                fi
              
              else
                echo 'ERROR: No DB dump mounted at /mnt/teamcity-dump.sql'
              fi
        - name: init-main
          image: badouralix/curl-jq
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
          # exit immediately if this is the main node (index 0)
          # hold secondary nodes from starting until the main node is initialized
          command:
            - sh
            - -c
            - >
              [[ ${POD_INDEX} == 0 ]] &&
              echo 'Main node, proceed'
              || while [[ $(curl --silent --output /dev/null --write-out '%{http_code}' server-0.nodes-headless.{{ .Values.namespace.server }}.svc.cluster.local:8111/healthCheck/ready ) != '200' ]]; do
                echo 'Waiting for main node to initialize'; sleep 10;
              done
      containers:
        - name: server
          image: "{{ .Values.server.image.repository }}:{{ .Values.server.image.tag }}"
          imagePullPolicy: {{ .Values.server.image.pullPolicy }}
          command: [ "/bin/bash" ]
          # this will prepare a variable SERVER_OPTS, holding another variable name, like TEAMCITY_SERVER_OPTS_NODE_0
          # then expand it (if defined) using bash ${!var} indirection - or fallback to $TEAMCITY_SERVER_OPTS_DEFAULT
          # and then expand it once more using eval to substitute ${POD_INDEX} with actual values to make correct nodeId and rootURL
          args: [ "-c", 'SERVER_OPTS="TEAMCITY_SERVER_OPTS_NODE_${POD_INDEX}"  &&  export TEAMCITY_SERVER_OPTS=$(eval echo ${!SERVER_OPTS:-$TEAMCITY_SERVER_OPTS_DEFAULT})  &&  /run-server.sh']
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: SERVER_NAMESPACE
              value: {{ .Values.namespace.server }}
            {{- range $key, $val := .Values.server.env }}
            - name: "{{ $key }}"
              value: "{{ $val }}"
            {{- end }}
            - name: "TEAMCITY_DB_URL"
              value: {{ include "teamcity.db.url" . }}
            - name: "TEAMCITY_DB_USER"
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Release.Name }}-db-auth
            - name: "TEAMCITY_DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-db-auth
          ports:
            - name: http
              containerPort: 8111
          resources:
            {{- .Values.resources.server | toYaml | nindent 12 }}
          volumeMounts:
            - mountPath: {{ .Values.server.env.TEAMCITY_DATA_PATH }}
              name: data
      securityContext:
        fsGroup: 1000   # tcuser uid
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: server-data
        - name: pg-dump
          configMap:
            name: {{ include "teamcity.fullname" . }}-pg-dump
        {{ include "teamcity.server.configs.volumes" . | indent 8 }}
