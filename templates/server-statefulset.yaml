# headless service for statefulset
apiVersion: v1
kind: Service
metadata:
  name: nodes
  namespace: {{ .Values.namespace.server }}
  labels:
    app: teamcity-server
spec:
  clusterIP: None
  selector:
    app: teamcity-server

---

# service for ingress
apiVersion: v1
kind: Service
metadata:
  name: nodes2
  namespace: {{ .Values.namespace.server }}
  labels:
    app: teamcity-server
spec:
  selector:
    app: teamcity-server
  ports:
    - name: tc
      port: 8111

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: server
  namespace: {{ .Values.namespace.server }}
spec:
  serviceName: nodes
  replicas: {{ .Values.env.server.REPLICAS }}
  selector:
    matchLabels:
      app: teamcity-server
  template:
    metadata:
      labels:
        app: teamcity-server
    spec:
      initContainers:
        - name: config-restore
          image: badouralix/curl-jq
          env:
            - name: TOKEN
              valueFrom:
                secretKeyRef:
                  key: token
                  name: teamcity-secret
          volumeMounts:
            - mountPath: {{ .Values.env.server.TEAMCITY_DATA_PATH }}
              name: data
            {{- $processedDict := dict }}
            {{- range $path, $bytes := .Files.Glob "configs/server/**" }}
            {{- $name := (dir $path) }}
            {{- if not (hasKey $processedDict $name) }}
            {{- $_ := set $processedDict $name "true" }}
            - mountPath: /server-config.dist/{{ $name | trimPrefix "configs/server/" }}
              name: config-{{ $name | sha1sum }}
            {{- end }}
            {{- end }}
          command:
            - sh
            - -c
            - >
              set -x &&
              [[ "$(ls -A /mnt/data | wc -l)" == "0" ]] && echo 'Data dir is empty, restoring configs' &&
                cp -rL /server-config.dist/* /mnt/data &&
              mkdir -p /mnt/data/lib/jdbc &&
                curl https://jdbc.postgresql.org/download/postgresql-42.7.7.jar -o /mnt/data/lib/jdbc/postgresql-42.7.7.jar &&
              apk add envsubst &&
                envsubst < /mnt/data/config/projects/_Root/project-config.xml > /tmp/project-config.xml &&
                mv /tmp/project-config.xml /mnt/data/config/projects/_Root/project-config.xml &&
              chown -R 1000:1000 /mnt/data
              || echo 'Data dir is NOT empty, skipping'
        - name: pg-restore
          image: postgres:16
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: SERVER_ADMIN_USERNAME
              value: {{ .Values.server.admin.username }}
            - name: SERVER_ADMIN_PASSWORD
              value: {{ .Values.server.admin.password }}
            - name: POSTGRES_HOST
              value: {{ .Values.postgres.host }}
            - name: POSTGRES_PORT
              value: "{{ .Values.postgres.port }}"
            - name: POSTGRES_DB
              value: {{ .Values.postgres.db }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Release.Name }}-pgauth
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-pgauth
          volumeMounts:
            - mountPath: /mnt/
              name: pg-dump
          command:
            - bash
            - -c
            - >
              set -x &&
              [[ ${POD_INDEX} == 0 ]] &&
              while ! $(pg_isready -q -h ${POSTGRES_HOST} -p ${POSTGRES_PORT}); do echo 'Waiting for postgres to be available'; sleep 1; done &&
              TBL_COUNT=$(PGPASSWORD=${POSTGRES_PASSWORD}
              psql -q --tuples-only
              -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}
              -c "SELECT count(table_name) FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE';") &&
              (( ${TBL_COUNT} == 0 )) && echo 'Database is empty, restoring dump' &&
              apt-get update && apt-get install -y apache2-utils &&
              export SERVER_ADMIN_PASSWORD_BCRYPT=$(echo ${SERVER_ADMIN_PASSWORD} | htpasswd -inB - | cut -d ':' -f2) &&
              cp /mnt/teamcity-dump.sql /tmp/teamcity-dump.sql &&
              sed -i s#"__admin_username__"#"${SERVER_ADMIN_USERNAME}"# /tmp/teamcity-dump.sql &&
              sed -i s#"__admin_password__"#"${SERVER_ADMIN_PASSWORD_BCRYPT}"# /tmp/teamcity-dump.sql &&
              PGPASSWORD=${POSTGRES_PASSWORD} psql -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /tmp/teamcity-dump.sql
              || echo 'Not a main node or DB is not empty, skipping'
        - name: init-main
          image: badouralix/curl-jq
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
          # exit immidiately if this is the main node (index 0)
          # hold secondary nodes from starting until the main node is initialized
          command:
            - sh
            - -c
            - >
              set -x &&
              [[ ${POD_INDEX} == 0 ]] && echo 'Main node, proceed' || while [[ $(curl --silent --output /dev/null --write-out '%{http_code}' server-0.nodes.{{ .Values.namespace.server }}.svc.cluster.local:8111/healthCheck/ready ) != '200' ]]; do echo 'Waiting for main node to initialize'; sleep 10; done
      containers:
        - name: teamcity-server
          image: "{{ .Values.image.server.repository }}:{{ .Values.image.server.tag }}"
          imagePullPolicy: {{ .Values.image.server.pullPolicy }}
          command: [ "/bin/bash" ]
          # this will prepare a variable SERVER_OPTS, holding another variable name, like TEAMCITY_SERVER_OPTS_NODE_0
          # then expand it (if defined) using bash ${!var} indirection - or fallback to $TEAMCITY_SERVER_OPTS_DEFAULT
          # and then expand it once more using eval to substitute ${POD_INDEX} with actual values to make correct nodeId and rootURL
          args: [ "-c", 'SERVER_OPTS="TEAMCITY_SERVER_OPTS_NODE_${POD_INDEX}"  &&  export TEAMCITY_SERVER_OPTS=$(eval echo ${!SERVER_OPTS:-$TEAMCITY_SERVER_OPTS_DEFAULT})  &&  /run-server.sh']
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            - name: SERVER_NAMESPACE
              value: {{ .Values.namespace.server }}
            {{- range $key, $val := .Values.env.server }}
            - name: "{{ $key }}"
              value: "{{ $val }}"
            {{- end }}
            - name: "TEAMCITY_DB_URL"
              value: "jdbc:postgresql://{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.db }}"
            - name: "TEAMCITY_DB_USER"
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Release.Name }}-pgauth
            - name: "TEAMCITY_DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-pgauth
          ports:
            - name: http
              containerPort: 8111
          resources:
            {{- .Values.resources.server | toYaml | nindent 12 }}
          volumeMounts:
            - mountPath: {{ .Values.env.server.TEAMCITY_DATA_PATH }}
              name: data
      securityContext:
        fsGroup: 1000   # tcuser uid
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: server-data
        {{- $processedDict := dict }}
        {{- range $path, $bytes := .Files.Glob "configs/server/**" }}
        {{- $name := (dir $path) }}
        {{- if not (hasKey $processedDict $name) }}
        {{- $_ := set $processedDict $name "true" }}
        - name: config-{{ $name | sha1sum }}
          configMap:
            name: config-{{ $name | sha1sum }}
        {{- end }}
        {{- end }}
        - name: pg-dump
          configMap:
            name: teamcity-pg-dump
