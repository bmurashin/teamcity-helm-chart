apiVersion: v1
kind: Service
metadata:
  name: nodes
  namespace: {{ .Values.namespace.server }}
  labels:
    app: teamcity-server
spec:
  clusterIP: None
  selector:
    app: teamcity-server
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: server
  namespace: {{ .Values.namespace.server }}
spec:
  serviceName: nodes
  replicas: {{ .Values.env.server.REPLICAS }}
  selector:
    matchLabels:
      app: teamcity-server
  template:
    metadata:
      labels:
        app: teamcity-server
    spec:
      initContainers:
        - name: init-main
          image: badouralix/curl-jq
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
          # exit immidiately if this is the main node (index 0)
          # hold secondary nodes from starting until the main node is initialized
          command: 
            - sh
            - -c
            - "[[ ${POD_INDEX} == 0 ]] && echo 'Main node, proceed' || while [[ $(curl --silent --output /dev/null --write-out '%{http_code}' server-0.nodes.{{ .Values.namespace.server }}.svc.cluster.local:8111/healthCheck/ready ) != '200' ]]; do echo 'Waiting for main node to initialize'; sleep 10; done"
      containers:
        - name: teamcity-server
          image: "{{ .Values.image.server.repository }}:{{ .Values.image.server.tag }}"
          imagePullPolicy: {{ .Values.image.server.pullPolicy }}
          command: [ "/bin/bash" ]
          # this will prepare a variable SERVER_OPTS, holding another variable name, like TEAMCITY_SERVER_OPTS_NODE_0
          # then expand it (if defined) using bash ${!var} indirection - or fallback to $TEAMCITY_SERVER_OPTS_DEFAULT
          # and then expand it once more using eval to substitute ${POD_INDEX} with actual values to make correct nodeId and rootURL
          args: [ "-c", 'SERVER_OPTS="TEAMCITY_SERVER_OPTS_NODE_${POD_INDEX}"  &&  export TEAMCITY_SERVER_OPTS=$(eval echo ${!SERVER_OPTS:-$TEAMCITY_SERVER_OPTS_DEFAULT})  &&  /run-server.sh']
          env:
            - name: POD_INDEX
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['apps.kubernetes.io/pod-index']
            {{- range $key, $val := .Values.env.server }}
            - name: "{{ $key }}"
              value: "{{ $val }}"
            {{- end }}
            - name: "TEAMCITY_DB_URL"
              value: "jdbc:postgresql://{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/{{ .Values.postgres.db }}"
            - name: "TEAMCITY_DB_USER"
              valueFrom:
                secretKeyRef:
                  key: username
                  name: {{ .Release.Name }}-pgauth
            - name: "TEAMCITY_DB_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-pgauth
          ports:
            - name: http
              containerPort: 8111
          resources:
            {{- .Values.resources.server | toYaml | nindent 12 }}
          volumeMounts:
            - mountPath: {{ .Values.env.server.TEAMCITY_DATA_PATH }}
              name: data
      securityContext:
        fsGroup: 1000   # tcuser uid
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: server-data